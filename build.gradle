plugins {
    id 'java'
    id 'org.flywaydb.flyway' version '6.5.5'
    id 'org.springframework.boot' version '2.4.4'
    id 'com.google.cloud.tools.jib' version '2.8.0'
    id 'com.avast.gradle.docker-compose' version '0.13.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.mw.portfolio'
version = '1.0.0'
sourceCompatibility = '11'

configurations { compileOnly { extendsFrom annotationProcessor } }

repositories { mavenCentral() }

dependencies {

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // boot
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // other
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.sendgrid:sendgrid-java:4.0.1'
    implementation 'com.google.firebase:firebase-admin:7.1.1'
    implementation 'com.vladmihalcea:hibernate-types-52:2.9.13'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

flyway {
    user = 'admin'
    password = 'admin'
    url = 'jdbc:postgresql://localhost:5432/portfolio'
}

jib {
    container {
        ports = ['8080']
    }
    to {
        image = 'gcr.io/warrenburg-portfolio/portfolio-server:latest'
    }
    from {
        image = 'gcr.io/distroless/java:11'
    }
}

dockerCompose {
    removeOrphans = true
    removeVolumes = false
    projectName = 'portfolio-server'
    dockerComposeWorkingDirectory = "$rootDir/docker"
}


task runPostgres(type: Exec) {
    workingDir rootDir
    commandLine 'docker-compose', 'run', '-d', '--service-ports', 'postgres'
}

test { useJUnitPlatform() }
